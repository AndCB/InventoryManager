<?xml version="1.0"?>
<doc>
    <assembly>
        <name>backend</name>
    </assembly>
    <members>
        <member name="T:backend.Controllers.InventoryController">
            <summary>
            Controller for handling all requests related to inventory items
            </summary>
            <param name="repo">Repository for comunicating with the database</param>
        </member>
        <member name="M:backend.Controllers.InventoryController.#ctor(backend.Interfaces.IInventoryRepository)">
            <summary>
            Controller for handling all requests related to inventory items
            </summary>
            <param name="repo">Repository for comunicating with the database</param>
        </member>
        <member name="M:backend.Controllers.InventoryController.GetAllItems(backend.Helpers.QueryObject)">
            <summary>
            Retrieves all inventory items.
            </summary>
            <returns> A paged result of the inventory</returns>
            <response code="200">Correctly fetches the inventory data</response>
            <response code="400">There was an issue with the request</response>
        </member>
        <member name="M:backend.Controllers.InventoryController.GetById(System.Int32)">
            <summary>
            Gets a specific item from the inventory.
            </summary>
             <param name="id">The ID of the inventory item to find</param>
            <returns> The specified item</returns>
            <response code="200">Item found</response>
            <response code="400">There was an issue with the request</response>
            <response code="404">No item found for the given id</response>
        </member>
        <member name="M:backend.Controllers.InventoryController.Add(backend.Models.InventoryItemDTO)">
            <summary>
            Adds a new entry to the inventory.
            </summary>
            <returns> The added item</returns>
            <response code="200">Item created successfully</response>
            <response code="400">The item is invalid</response>
        </member>
        <member name="M:backend.Controllers.InventoryController.Update(System.Int32,backend.Models.InventoryItemDTO)">
            <summary>
            Updates the specified item in the inventory.
            </summary>
             <param name="id">The ID of the inventory item to update</param>
             <param name="updatedItem">The updated details of the inventory item</param>
            <returns> The updated item</returns>
            <response code="200">Item correctly updated</response>
            <response code="400">There was an issue with the request</response>
            <response code="404">No item found for the given id</response>
        </member>
        <member name="M:backend.Controllers.InventoryController.DeleteItem(System.Int32)">
            <summary>
            Deletes an item from the inventory.
            </summary>
             <param name="id">The ID of the inventory item to delete</param>
            <response code="204">Item correctly deleted</response>
            <response code="400">There was an issue with the request</response>
            <response code="404">No item found for the given id</response>
        </member>
        <member name="T:backend.Data.AppDBContext">
            <summary>
            Application's database context, responsible for interacting with the database
            using EntotyFramework Core.
            </summary>
            <param name="dbContextOptions">Configuration options for the database context, such as the database connection string</param>
        </member>
        <member name="M:backend.Data.AppDBContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            Application's database context, responsible for interacting with the database
            using EntotyFramework Core.
            </summary>
            <param name="dbContextOptions">Configuration options for the database context, such as the database connection string</param>
        </member>
        <member name="P:backend.Data.AppDBContext.InventoryItems">
            <summary>
            Gets or sets the <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1"/> for the <see cref="T:backend.Models.InventoryItem"/> entity.
            This property represents the 'InventoryItems' table in the database, allowing CRUD operations on InventoryItem records.
            </summary>
        </member>
        <member name="T:backend.Helpers.PagedResult`1">
            <summary>
            A paginated query result
            </summary>
            <typeparam name="T">Type of the expected result from the query</typeparam>
        </member>
        <member name="P:backend.Helpers.PagedResult`1.Items">
            <summary>
            List of items received from the query
            </summary>
        </member>
        <member name="P:backend.Helpers.PagedResult`1.TotalCount">
            <summary>
            Total number of entries in the table
            </summary>
        </member>
        <member name="P:backend.Helpers.PagedResult`1.PageSize">
            <summary>
            Number of records being returned in this page
            </summary>
        </member>
        <member name="P:backend.Helpers.PagedResult`1.CurrentPage">
            <summary>
            number of the page being returned
            </summary>
        </member>
        <member name="P:backend.Helpers.PagedResult`1.TotalPages">
            <summary>
            total number of pages given the total amount of records and the number of records per page
            </summary>
        </member>
        <member name="T:backend.Helpers.QueryObject">
            <summary>
            Object for handling filtering and pagination on querys
            </summary>
        </member>
        <member name="P:backend.Helpers.QueryObject.SortBy">
            <summary>
            Field to sort by
            </summary>
        </member>
        <member name="P:backend.Helpers.QueryObject.IsDescending">
            <summary>
            Whether the sorting is descenfing or not
            </summary>
        </member>
        <member name="P:backend.Helpers.QueryObject.Page">
            <summary>
            Page number to display
            </summary>
        </member>
        <member name="P:backend.Helpers.QueryObject.PageSize">
            <summary>
            Number of records per page
            </summary>
        </member>
        <member name="P:backend.Helpers.QueryObject.Filter">
            <summary>
            text to filter the results by
            </summary>
        </member>
        <member name="T:backend.Interfaces.IInventoryRepository">
            <summary>
            Interface for managing inventory items.
            Provides methods for creating, retrieving, updating, and deleting inventory items.
            </summary>
        </member>
        <member name="M:backend.Interfaces.IInventoryRepository.CreateAsync(backend.Models.InventoryItemDTO)">
            <summary>
             Creates a new inventory item asynchronously.
            </summary>
            <param name="item">The inventory item to create, represented as an <see cref="T:backend.Models.InventoryItemDTO"/>.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the created <see cref="T:backend.Models.InventoryItem"/>.</returns>
        </member>
        <member name="M:backend.Interfaces.IInventoryRepository.DeleteAsync(System.Int32)">
            <summary>
             Deletes an existing inventory item asynchronously by its ID.
            </summary>
            <param name="id">The ID of the inventory item to delete.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the deleted <see cref="T:backend.Models.InventoryItem"/> if found; otherwise, null.</returns>
        </member>
        <member name="M:backend.Interfaces.IInventoryRepository.GetAllAsync(backend.Helpers.QueryObject)">
            <summary>
            Retrieves all inventory items asynchronously, with optional filtering and pagination.
            </summary>
            <param name="query">The query object that contains filtering, sorting, and pagination parameters.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a <see cref="T:backend.Helpers.PagedResult`1"/> containing the inventory items.</returns>
        </member>
        <member name="M:backend.Interfaces.IInventoryRepository.GetByIdAsync(System.Int32)">
            <summary>
            Retrieves a specific inventory item asynchronously by its ID.
            </summary>
            <param name="id">The ID of the inventory item to retrieve.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the <see cref="T:backend.Models.InventoryItem"/> if found; otherwise, null.</returns>
        </member>
        <member name="M:backend.Interfaces.IInventoryRepository.ItemExists(System.Int32)">
            <summary>
            Checks whether an inventory item exists asynchronously by its ID.
            </summary>
            <param name="id">The ID of the inventory item to check for existence.</param>
            <returns>A task that represents the asynchronous operation. The task result is true if the item exists; otherwise, false.</returns>
        </member>
        <member name="M:backend.Interfaces.IInventoryRepository.UpdateAsync(System.Int32,backend.Models.InventoryItemDTO)">
            <summary>
            Updates an existing inventory item asynchronously by its ID.
            </summary>
            <param name="id">The ID of the inventory item to update.</param>
            <param name="itemDto">The updated inventory item data, represented as an <see cref="T:backend.Models.InventoryItemDTO"/>.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the updated <see cref="T:backend.Models.InventoryItem"/> if the update was successful; otherwise, null.</returns>
        </member>
        <member name="T:backend.Migrations.init">
            <inheritdoc />
        </member>
        <member name="M:backend.Migrations.init.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:backend.Migrations.init.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:backend.Migrations.init.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:backend.Models.InventoryItem">
            <summary>
            Inventory item
            </summary>
        </member>
        <member name="P:backend.Models.InventoryItem.Id">
            <summary>
            The unique identifier of the item
            </summary>
        </member>
        <member name="P:backend.Models.InventoryItem.Name">
            <summary>
            The name of the item
            </summary>
        </member>
        <member name="P:backend.Models.InventoryItem.Quantity">
            <summary>
            The quantity of the item in stock
            </summary>
        </member>
        <member name="P:backend.Models.InventoryItem.Price">
            <summary>
            The price of the item
            </summary>
        </member>
        <member name="M:backend.Models.InventoryItem.#ctor(backend.Models.InventoryItemDTO)">
            <summary>
            constructor for mapping InventoryItemDTOs to InventoryItem
            </summary>
            <param name="itemDTO">DTO for handling create operations</param>
        </member>
        <member name="M:backend.Models.InventoryItem.#ctor(System.Int32,System.String,System.Int32,System.Decimal)">
            <summary>
            Constructor for initializing inventory items
            </summary>
            <param name="id">item id</param>
            <param name="name">item name</param>
            <param name="quantity">item quantity</param>
            <param name="price">item price</param>
        </member>
        <member name="M:backend.Models.InventoryItem.#ctor">
            <summary>
            Empty constructor for instanciation
            </summary>
        </member>
        <member name="T:backend.Models.InventoryItemDTO">
             <summary>
            
             </summary>
        </member>
        <member name="P:backend.Models.InventoryItemDTO.Name">
            <summary>
            The name of the item
            </summary>
        </member>
        <member name="P:backend.Models.InventoryItemDTO.Quantity">
            <summary>
            The quantity in stock of the item
            </summary>
        </member>
        <member name="P:backend.Models.InventoryItemDTO.Price">
            <summary>
            The price of the item
            </summary>
        </member>
        <member name="T:backend.Repository.ItemRepo">
            <summary>
            Repository for managing inventory items.
            Implements the <see cref="T:backend.Interfaces.IInventoryRepository"/> interface to provide CRUD operations for inventory.
            </summary>
        </member>
        <member name="M:backend.Repository.ItemRepo.#ctor(backend.Data.AppDBContext)">
            <summary>
            Repository for managing inventory items.
            Implements the <see cref="T:backend.Interfaces.IInventoryRepository"/> interface to provide CRUD operations for inventory.
            </summary>
        </member>
        <member name="M:backend.Repository.ItemRepo.CreateAsync(backend.Models.InventoryItemDTO)">
            <summary>
            Creates a new inventory item asynchronously.
            </summary>
            <param name="item">The inventory item to create, represented as an <see cref="T:backend.Models.InventoryItemDTO"/>.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the created <see cref="T:backend.Models.InventoryItem"/>.</returns>
        </member>
        <member name="M:backend.Repository.ItemRepo.DeleteAsync(System.Int32)">
            <summary>
            Deletes an existing inventory item asynchronously by its ID.
            </summary>
            <param name="id">The ID of the inventory item to delete.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the deleted <see cref="T:backend.Models.InventoryItem"/> if found; otherwise, null.</returns>
        </member>
        <member name="M:backend.Repository.ItemRepo.GetAllAsync(backend.Helpers.QueryObject)">
            <summary>
            Retrieves all inventory items asynchronously, with optional filtering, sorting, and pagination.
            </summary>
            <param name="query">The query object containing filtering, sorting, and pagination parameters.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a <see cref="T:backend.Helpers.PagedResult`1"/> with the paginated list of items.</returns>
        </member>
        <member name="M:backend.Repository.ItemRepo.GetByIdAsync(System.Int32)">
            <summary>
            Retrieves an inventory item asynchronously by its ID.
            </summary>
            <param name="id">The ID of the inventory item to retrieve.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the <see cref="T:backend.Models.InventoryItem"/> if found; otherwise, null.</returns>
        </member>
        <member name="M:backend.Repository.ItemRepo.ItemExists(System.Int32)">
            <summary>
            Checks if an inventory item exists asynchronously by its ID.
            </summary>
            <param name="id">The ID of the inventory item to check.</param>
            <returns>A task that represents the asynchronous operation. The task result is true if the item exists; otherwise, false.</returns>
        </member>
        <member name="M:backend.Repository.ItemRepo.UpdateAsync(System.Int32,backend.Models.InventoryItemDTO)">
            <summary>
            Updates an existing inventory item asynchronously by its ID.
            </summary>
            <param name="id">The ID of the inventory item to update.</param>
            <param name="itemDto">The updated item data, represented as an <see cref="T:backend.Models.InventoryItemDTO"/>.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the updated <see cref="T:backend.Models.InventoryItem"/> if found and updated; otherwise, null.</returns>
        </member>
    </members>
</doc>
